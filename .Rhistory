?randomForest()
?randomForest
??randomForest
library(randomForest)
install.packages("randomForest")
?randomForest()
??randomForest
library(AmesHousing)
data(AmesHousing)
ameshousing
data(ameshousing)
install.packages("AmesHousing")
AmesHousing
x = data(AmesHousing)
ames <- AmesHousing::make_ames()
View(ames)
unique(ames$Sale_Condition)
View(ames$Sale_Type)
unique(ames$Sale_Type)
knitr::opts_chunk$set(echo = FALSE)
library(AmesHousing)
library(AmesHousing)
library(dplyr)
library(randomForest)
set.seed(15)
ames <- make_ames()
ames <- ames %>% select(c("Sale_Type","Pool_QC","Year_Sold","Alley","Overall_Cond","Year_Built","Lot_Area","Street",
"Central_Air","Lot_Frontage","MS_Zoning","House_Style","Bldg_Type","Neighborhood",
"Overall_Qual","Utilities","Exter_Qual", "Sale_Price"))
sample <- sample.int(n = nrow(ames), size = floor(.8*nrow(ames)), replace = F)
train <- ames[sample, ]
test  <- ames[-sample, ]
amesRF <- randomForest(Sale_Price ~ ., data = train,mtry = 4)
amesBag <- randomForest(Sale_Price ~ ., data = train,mtry= 18)
MSE(amesRF$predicted,test)
MSE(amesRF$predicted,test$Sale_Price)
mse <- function(actual,pred) {
return (actual - predicted)^2
}
mse(amesRF$predicted,test$Sale_Price)
mse <- function(actual,pred) {
return (actual - pred)^2
}
mse(amesRF$predicted,test$Sale_Price)
mse <- function(actual,pred) {
return sum((actual - pred)^2)
mse <- function(actual,pred) {
sqError = (actual - pred)^2
return(sum(sqError))
}
mse(amesRF$predicted,test$Sale_Price)
mse(amesBag$predicted,test$Sale_Price)
mse <- function(actual,pred) {
sqError = (actual - pred)^2
return(c(mean(sqError),sum(sqError)))
}
mse(amesBag$predicted,test$Sale_Price)
mse(amesRF$predicted,test$Sale_Price)
plot(amesRF,amesBag)
plot(amesRF) + plot(amesBag)
View(amesRF)
head(amesRF$mse)
ggplot(aes(x= 1:500)) + geom_line(amesRF$mse)
library(ggplot2)
ggplot(aes(x= 1:500)) + geom_line(amesRF$mse)
ggplot(aes(1:500)) + geom_line(amesRF$mse)
ggplot(aes(1:500),data = ames) + geom_line(mse)
ggplot(aes(x = 1:500,y = mse),data = ames) + geom_line()
View(amesRF)
len(amesRF$mse)
lamesRF$mse
amesRF$mse
ggplot(aes(x = 1:500,y = mse),data = ames) + geom_line()
ggplot(aes(x = 1:500,y = ames$mse)) + geom_line()
err = data.frame(tree = 1:500,rf = amesRF$mse,bag = amesBag$mse)
ggplot(data = err,aes(x = tree)) + geom_line(rf)
ggplot(data = err,aes(tree)) + geom_line(rf)
ggplot(data = err,aes(tree)) + geom_line(aes(rf))
ggplot(data = err,aes(tree,rf)) + geom_line()
View(err)
ggplot(data = err,aes(tree,rf)) + geom_line()
ggplot(data = err,aes(tree,rf)) + geom_line() +geom_line(aes(y=bag))
ggplot(data = err,aes(tree,rf)) + geom_line(aes(color = "red")) +geom_line(aes(y=bag,color="blue"))
ggplot(data = err,aes(tree,rf)) + geom_line(aes(color = "Random Forest")) +geom_line(aes(y=bag,color="Bagging"))
?melt
??melt()
melt(mse)
melt(err)
reshape2::melt(err)
reshape2::melt(err,id = tree)
reshape2::melt(err,id = 'tree')
gr = reshape2::melt(err,id = 'tree')
ggplot(data = err,aes(tree,value,color = variable)) + geom_line()
ggplot(data = gr,aes(tree,value,color = variable)) + geom_line()
oob.err=double(18)
test.err=double(18)
#mtry is no of Variables randomly chosen at each split
for(mtry in 1:18)
{
rf= randomForest(Sale_Price ~ ., data = train,mtry = mtry)
oob.err[mtry] = rf$mse[400] #Error of all Trees fitted
pred<-predict(rf,test) #Predictions on Test Set for each Tree
test.err[mtry]= with(test, mean( (Sale_Price - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
errFrame = data.frame(numVars = 1:18,mse = test.err)
ggplot(aes(x = numVars,y = mse),data = errFrame)
ggplot(aes(x = numVars,y = mse),data = errFrame) + geom_line()
cbind(test.err,obb.err)
cbind(test.err,oob.err)
rbind(test.err,oob.err)
cbind(test.err,oob.err)
errFrame = reshape2::melt(errFrame,id = 'numVars')
View(errFrame)
errFrame = data.frame(numVars = 1:18,mseTest = test.err,mseOob = oob.err)
errFrame = reshape2::melt(errFrame,id = 'numVars')
View(errFrame)
ggplot(aes(x = numVars,y = value,color = variable),data = errFrame) + geom_line()
errFrame = data.frame(numVars = 1:18,mseTest = test.err,mseOob = oob.err)
write.csv(errFrame,"error_by_split.csv")
errFrame = data.frame(numVars = 1:18,mseTest = test.err,mseOob = oob.err)
write.csv(errFrame,"error_by_split.csv")
errFrame = reshape2::melt(errFrame,id = 'numVars')
ggplot(aes(x = numVars,y = value,color = variable),data = errFrame) + geom_line()
test.err
min(test.err)
# Reduce the number of columns from 81 to 18
ames <- make_ames()
ames <- ames %>% select(c("Sale_Type","Pool_QC","Year_Sold","Alley","Overall_Cond","Year_Built","Lot_Area","Street",
"Central_Air","Lot_Frontage","MS_Zoning","House_Style","Bldg_Type","Neighborhood",
"Overall_Qual","Utilities","Exter_Qual", "Sale_Price"))
# Split the data into training and test set
sample <- sample.int(n = nrow(ames), size = floor(.8*nrow(ames)), replace = F)
train <- ames[sample, ]
test  <- ames[-sample, ]
# Build a random forest and
amesRF <- randomForest(Sale_Price ~ ., data = train,mtry = 10)
amesBag <- randomForest(Sale_Price ~ ., data = train,mtry= 18)
err = data.frame(tree = 1:500,rf = amesRF$mse,bag = amesBag$mse)
gr = reshape2::melt(err,id = 'tree')
ggplot(data = gr,aes(tree,value,color = variable)) + geom_line()
save.image("~/Documents/randomForests/myData.RData")
